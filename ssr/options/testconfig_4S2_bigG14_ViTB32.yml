# ----------- Commands for running
# ----------- Single GPU
# PYTHONPATH="./:${PYTHONPATH}"  CUDA_VISIBLE_DEVICES=0 python basicsr/test.py -opt options/test/SRResNet_SRGAN/test_MSRResNet_x4.yml

# general settings
name: 001_MSRResNet_x4_f64b16_DIV2K_1000k_B16G1_wandb
model_type: SSRESRGANModel
scale: 4
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0

# USM the Ground-Truth
l1_gt_usm: True
percep_gt_usm: True
gan_gt_usm: False

# Feed the discriminator the same low-res images as the generator receives
feed_disc_lr: True

# test dataset settings
datasets:
  train:
    name: train
    type: S2NAIPDataset

    sentinel2_path: /content/small_val_set/sentinel2
    naip_path: /content/small_val_set/naip

    #tile_weights: super_resolution_2023-12-08/train_tile_weights/urban_set_weights.json

    use_shuffle: False  # shuffle must be false if using tile_weights

    num_worker_per_gpu: 32
    batch_size_per_gpu: 128

    s2_bands: [tci]

    n_s2_images: 4

    io_backend:
      type: disk
  val:
    name: validation
    type: S2NAIPDataset

    sentinel2_path: /content/small_val_set/sentinel2
    naip_path: /content/small_val_set/naip

    #tile_weights: super_resolution_2023-12-08/train_tile_weights/urban_set_weights.json

    use_shuffle: False  # shuffle must be false if using tile_weights

    s2_bands: [tci]

    n_s2_images: 4

    io_backend:
      type: disk

test_datasets:
   test:
     name: test
     type: S2NAIPDataset
     phase: test
     scale: 4

     sentinel2_path: /content/small_val_set/sentinel2
     naip_path: /content/small_val_set/naip

     use_shuffle: False

     n_s2_images: 4

     io_backend:
       type: disk

network_g:
  type: SSR_RRDBNet
  num_in_ch: 12  # number of Sentinel2 images * 3 channels (RGB)
  num_out_ch: 3
  num_feat: 64
  num_block: 23
  num_grow_ch: 32

network_d:
  type: SSR_UNetDiscriminatorSN
  num_in_ch: 15  # RGB of Real/Fake image + [optional] old high-res image + [optional] low-res images
  num_feat: 64
  skip_connection: True

# path
path:
  pretrain_network_g: /content/esrgan_baseline.pth
  param_key_g: params_ema
  strict_load_g: true
  param_key_d: params
  strict_load_d: true
  resume_state: ~

# validation settings
val:
  save_img: true
  suffix: ~  # add suffix to saved images, if None, use exp name

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false
      better: higher  # the higher, the better. Default: higher
#    ssim:
#      type: calculate_ssim
#      crop_border: 4
#      test_y_channel: false
#      better: higher

# Testing Settings
test:
  save_img: True

  metrics:
     psnr:
       type: calculate_psnr
       crop_border: 4
       test_y_channel: false
#     ssim:
#       type: calculate_ssim
#       crop_border: 4
#       test_y_channel: false
     cpsnr:
       type: calculate_cpsnr
       crop_border: 4
       test_y_channel: false
#     lpips:
#       type: calculate_lpips
#       lpips_model: vgg
#     clipscore:
#       type: calculate_clipscore
#       clip_model: clipa-ViT-bigG-14  # see ssr/metrics/clipscore.py for currently supported models
     remote_clipscore:
       type: calculate_remote_clipscore
       clip_model: ViT-B-32  # see ssr/metrics/remote_clipscore.py for currently supported models